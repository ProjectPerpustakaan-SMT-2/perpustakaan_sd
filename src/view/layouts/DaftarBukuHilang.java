/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view.layouts;

import javax.swing.BorderFactory;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import javax.swing.JDesktopPane;
import javax.swing.table.DefaultTableModel;

import customUI.TableCustom;
import entity.Transaksi;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import repository.Repository;
import static repository.Repository.conn;
import repository.TransaksiRepository;

import util.ViewUtil;
import view.popup.PopupViewDetailBukuHilang;

/**
 *
 * @author Hafidz Fadhillah
 */
public class DaftarBukuHilang extends javax.swing.JInternalFrame {

    private String username;

    private Repository<Transaksi> transRepo = new TransaksiRepository();

    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");

    /**
     * Creates new form TambahBuku
     */
    public DaftarBukuHilang() {
        initComponents();
        this.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI BUI = (BasicInternalFrameUI) this.getUI();
        BUI.setNorthPane(null);

        jam();
        loadData();
        TableCustom.apply(jScrollPane2, TableCustom.TableType.DEFAULT);
    }

    public void setUsername(String username) {
        this.username = username;

        if (username != null) {
            username = username.trim();
            // Split the username into words
            String[] words = username.split("\\s+");
            // Get the first word
            String firstWord = words[0];
            // Capitalize the first letter of the first word
            String capitalizedFirstWord = firstWord.substring(0, 1).toUpperCase() + firstWord.substring(1);
            tUserLogin.setText("Selamat Datang " + capitalizedFirstWord + " !");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tJam = new javax.swing.JLabel();
        tUserLogin = new javax.swing.JLabel();
        btnDaftarKerusakan = new javax.swing.JLabel();
        btnBukuDiganti = new javax.swing.JLabel();
        tCari = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabel = new javax.swing.JTable();
        background = new javax.swing.JLabel();

        setBorder(null);
        setPreferredSize(new java.awt.Dimension(1366, 768));
        getContentPane().setLayout(null);

        tJam.setFont(new java.awt.Font("Calisto MT", 1, 20)); // NOI18N
        getContentPane().add(tJam);
        tJam.setBounds(670, 8, 110, 40);

        tUserLogin.setFont(new java.awt.Font("Calisto MT", 0, 16)); // NOI18N
        tUserLogin.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        getContentPane().add(tUserLogin);
        tUserLogin.setBounds(1105, 15, 200, 23);

        btnDaftarKerusakan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDaftarKerusakan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDaftarKerusakanMouseClicked(evt);
            }
        });
        getContentPane().add(btnDaftarKerusakan);
        btnDaftarKerusakan.setBounds(437, 150, 103, 30);

        btnBukuDiganti.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBukuDiganti.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBukuDigantiMouseClicked(evt);
            }
        });
        getContentPane().add(btnBukuDiganti);
        btnBukuDiganti.setBounds(563, 150, 128, 32);

        tCari.setFont(new java.awt.Font("Calisto MT", 0, 16)); // NOI18N
        tCari.setBorder(null);
        tCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tCariKeyReleased(evt);
            }
        });
        getContentPane().add(tCari);
        tCari.setBounds(995, 145, 290, 40);

        Tabel.setFont(new java.awt.Font("Calisto MT", 0, 14)); // NOI18N
        Tabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Data", "Data", "Data"
            }
        ));
        Tabel.getTableHeader().setReorderingAllowed(false);
        Tabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabelMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Tabel);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(437, 205, 890, 500);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/layouts/Daftar Buku Hilang.png"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, 0, 1366, 768);

        setBounds(0, 0, 1366, 768);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDaftarKerusakanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDaftarKerusakanMouseClicked
        // TODO add your handling code here:
        DaftarKerusakan daftarKerusakan = new DaftarKerusakan();
        daftarKerusakan.setUsername(username);
        JDesktopPane desktopPane = getDesktopPane();
        desktopPane.add(daftarKerusakan);
        daftarKerusakan.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_btnDaftarKerusakanMouseClicked

    private void tCariKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tCariKeyReleased
        // TODO add your handling code here:
        String value = tCari.getText();

        int no = 1;
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Disable cell editing
            }
        };

        model.addColumn("No");
        model.addColumn("Nama Peminjam");
        model.addColumn("Kelas");
        model.addColumn("Buku");
        model.addColumn("Tgl Kembali");
        model.addColumn("Catatan");
        model.addColumn("ID");

        String sql = "SELECT transaksi.*, detail_transaksi.*, buku.*, kerusakan.* FROM transaksi "
                + "INNER JOIN detail_transaksi ON detail_transaksi.kode_transaksi = transaksi.kode_transaksi "
                + "INNER JOIN buku ON detail_transaksi.kode_buku = buku.kode_buku "
                + "INNER JOIN kerusakan ON detail_transaksi.kode_kerusakan = kerusakan.kode_kerusakan "
                + "WHERE buku.status = 'Hilang' AND kerusakan.jenis_kerusakan = 'Hilang' AND transaksi.nama_peminjam LIKE ? ORDER BY transaksi.kode_transaksi ASC";

        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            statement.setString(1, "%" + value + "%");
            ResultSet results = statement.executeQuery();

            while (results.next()) {
                model.addRow(new Object[]{
                    no++,
                    results.getString("nama_peminjam"),
                    results.getString("kelas"),
                    results.getString("judul_buku"),
                    sdf.format(results.getDate("tgl_kembali")),
                    results.getString("note"),
                    results.getInt("kode_transaksi")
                });
            }

            Tabel.setModel(model);
            ViewUtil.hideTableColumn(Tabel, 6);
            customStyleTable();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_tCariKeyReleased

    private void TabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabelMouseClicked
        // TODO add your handling code here:
        int row = Tabel.getSelectedRow();
        String value = Tabel.getModel().getValueAt(row, 6).toString();
        Transaksi transaksi = transRepo.get(Integer.valueOf(value));

        int choice = JOptionPane.showOptionDialog(
                this,
                "Pilih Opsi Yang Akan Anda Lakukan!",
                "Konfirmasi",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new Object[]{"Detail", "Edit", "Cancel"},
                "Detail"
        );

        if (choice == 0) {
            new PopupViewDetailBukuHilang(transaksi).setVisible(true);
        } else if (choice == 1) {
            EditBukuHilang EditBukuHilang = new EditBukuHilang(transaksi);
            EditBukuHilang.setUsername(username);
            JDesktopPane desktopPane = getDesktopPane();
            desktopPane.add(EditBukuHilang);
            EditBukuHilang.setVisible(true);

            this.dispose();
        }
    }//GEN-LAST:event_TabelMouseClicked

    private void btnBukuDigantiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBukuDigantiMouseClicked
        // TODO add your handling code here:
        DaftarBukuTelahDiganti bukuTelahDiganti = new DaftarBukuTelahDiganti();
        bukuTelahDiganti.setUsername(username);
        JDesktopPane desktopPane = getDesktopPane();
        desktopPane.add(bukuTelahDiganti);
        bukuTelahDiganti.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_btnBukuDigantiMouseClicked

    private void loadData() {
        int no = 1;
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Disable cell editing
            }
        };

        model.addColumn("No");
        model.addColumn("Nama Peminjam");
        model.addColumn("Kelas");
        model.addColumn("Buku");
        model.addColumn("Tgl Kembali");
        model.addColumn("Catatan");
        model.addColumn("ID");

        String sql = "SELECT transaksi.*, detail_transaksi.*, buku.*, kerusakan.* FROM transaksi "
                + "INNER JOIN detail_transaksi ON detail_transaksi.kode_transaksi = transaksi.kode_transaksi "
                + "INNER JOIN buku ON detail_transaksi.kode_buku = buku.kode_buku "
                + "INNER JOIN kerusakan ON detail_transaksi.kode_kerusakan = kerusakan.kode_kerusakan "
                + "WHERE buku.status = 'Hilang' AND kerusakan.jenis_kerusakan = 'Hilang' ORDER BY transaksi.kode_transaksi ASC";

        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            ResultSet results = statement.executeQuery();

            while (results.next()) {
                model.addRow(new Object[]{
                    no++,
                    results.getString("nama_peminjam"),
                    results.getString("kelas"),
                    results.getString("judul_buku"),
                    sdf.format(results.getDate("tgl_kembali")),
                    results.getString("note"),
                    results.getInt("kode_transaksi")
                });
            }

            Tabel.setModel(model);
            ViewUtil.hideTableColumn(Tabel, 6);
            customStyleTable();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void customStyleTable() {
        Tabel.getColumnModel().getColumn(0).setMaxWidth(40);
    }

    private void jam() {
        try {
            ActionListener taskPerformer = (ActionEvent ae) -> {
                String finalJam;
                String noljam = "";
                String nolmenit = "";
                String noldetik = "";
                Calendar dt = Calendar.getInstance();

                int jam = dt.get(Calendar.HOUR_OF_DAY);
                int menit = dt.get(Calendar.MINUTE);
                int detik = dt.get(Calendar.SECOND);

                if (jam < 10) {
                    noljam = "0";
                }

                if (menit < 10) {
                    nolmenit = "0";
                }

                if (detik < 10) {
                    noldetik = "0";
                }

                String Sjam = noljam + Integer.toString(jam);
                String Smenit = nolmenit + Integer.toString(menit);
                String Sdetik = noldetik + Integer.toString(detik);
                finalJam = Sjam + ":" + Smenit + ":" + Sdetik;

                tJam.setText(finalJam);
            };
            new javax.swing.Timer(1000, taskPerformer).start();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabel;
    private javax.swing.JLabel background;
    private javax.swing.JLabel btnBukuDiganti;
    private javax.swing.JLabel btnDaftarKerusakan;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField tCari;
    private javax.swing.JLabel tJam;
    private javax.swing.JLabel tUserLogin;
    // End of variables declaration//GEN-END:variables
}
