/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view.layouts;

import customUI.TableCustom;
import entity.Buku;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.BorderFactory;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import repository.BukuRepository;
import repository.Repository;
import static repository.Repository.conn;
import util.ViewUtil;
import view.popup.PopupViewDetailBuku;

/**
 *
 * @author Hafidz Fadhillah
 */
public class DashboardSiswaView extends javax.swing.JInternalFrame {

    private Repository<Buku> bkuRepo = new BukuRepository();

    SimpleDateFormat sdf = new SimpleDateFormat("yyyy");

    /**
     * Creates new form TambahBuku
     */
    public DashboardSiswaView() {
        initComponents();
        this.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI BUI = (BasicInternalFrameUI) this.getUI();
        BUI.setNorthPane(null);

        loadDataTabelFavorit();
        loadDataTabelBukuBaru();

        TableCustom.apply(TabelBukuFavorit, TableCustom.TableType.DEFAULT);
        TableCustom.apply(TabelBukuBaru, TableCustom.TableType.DEFAULT);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TabelBukuFavorit = new javax.swing.JScrollPane();
        Tabel = new javax.swing.JTable();
        TabelBukuBaru = new javax.swing.JScrollPane();
        Tabel1 = new javax.swing.JTable();
        background = new javax.swing.JLabel();

        setBorder(null);
        setPreferredSize(new java.awt.Dimension(1366, 768));
        getContentPane().setLayout(null);

        Tabel.setFont(new java.awt.Font("Calisto MT", 0, 14)); // NOI18N
        Tabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Data", "Data", "Data"
            }
        ));
        Tabel.getTableHeader().setReorderingAllowed(false);
        Tabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabelMouseClicked(evt);
            }
        });
        TabelBukuFavorit.setViewportView(Tabel);

        getContentPane().add(TabelBukuFavorit);
        TabelBukuFavorit.setBounds(445, 185, 860, 160);

        Tabel1.setFont(new java.awt.Font("Calisto MT", 0, 14)); // NOI18N
        Tabel1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Data", "Data", "Data"
            }
        ));
        Tabel1.getTableHeader().setReorderingAllowed(false);
        Tabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tabel1MouseClicked(evt);
            }
        });
        TabelBukuBaru.setViewportView(Tabel1);

        getContentPane().add(TabelBukuBaru);
        TabelBukuBaru.setBounds(445, 430, 860, 245);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/layouts/Dashboard Siswa.png"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, 0, 1366, 768);

        setBounds(0, 0, 1366, 768);
    }// </editor-fold>//GEN-END:initComponents

    private void TabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabelMouseClicked
        // TODO add your handling code here:
        int row = Tabel.getSelectedRow();
        String value = Tabel.getModel().getValueAt(row, 6).toString();
        Buku buku = bkuRepo.get(Integer.valueOf(value));

        new PopupViewDetailBuku(buku).setVisible(true);
    }//GEN-LAST:event_TabelMouseClicked

    private void Tabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tabel1MouseClicked
        // TODO add your handling code here:
        int row = Tabel1.getSelectedRow();
        String value = Tabel1.getModel().getValueAt(row, 6).toString();
        Buku buku = bkuRepo.get(Integer.valueOf(value));

        new PopupViewDetailBuku(buku).setVisible(true);
    }//GEN-LAST:event_Tabel1MouseClicked

    private void loadDataTabelFavorit() {
        int no = 1;
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Disable cell editing
            }
        };

        model.addColumn("No");
        model.addColumn("Nama Buku");
        model.addColumn("Pengarang");
        model.addColumn("Klasifikasi");
        model.addColumn("Penerbit");
        model.addColumn("Jumlah Peminjam");
        model.addColumn("ID");

        String sql = "SELECT detail_transaksi.kode_buku, buku.judul_buku, buku.nama_pengarang, klasifikasi.nama_klasifikasi, penerbit.penerbit, "
                + "COUNT(*) AS book_count FROM detail_transaksi "
                + "INNER JOIN buku ON detail_transaksi.kode_buku = buku.kode_buku "
                + "INNER JOIN klasifikasi ON buku.kode_ddc = klasifikasi.id_klasifikasi "
                + "INNER JOIN penerbit ON penerbit.kode_penerbit = buku.kode_penerbit "
                + "GROUP BY detail_transaksi.kode_buku, buku.judul_buku "
                + "ORDER BY COUNT(*) DESC";

        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            ResultSet results = statement.executeQuery();

            while (results.next()) {
                model.addRow(new Object[]{
                    no++,
                    results.getString("buku.judul_buku"),
                    results.getString("buku.nama_pengarang"),
                    results.getString("klasifikasi.nama_klasifikasi"),
                    results.getString("penerbit.penerbit"),
                    results.getInt("book_count"),
                    results.getInt("detail_transaksi.kode_buku")
                });
            }

            Tabel.setModel(model);
            ViewUtil.hideTableColumn(Tabel, 6);
            customStyleTable();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void loadDataTabelBukuBaru() {
        int no = 1;
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Disable cell editing
            }
        };

        model.addColumn("No");
        model.addColumn("Nama Buku");
        model.addColumn("Pengarang");
        model.addColumn("Klasifikasi");
        model.addColumn("Penerbit");
        model.addColumn("Tahun Terbit");
        model.addColumn("ID");

        String sql = "SELECT buku.*, penerbit.*, klasifikasi.* FROM buku "
                + "INNER JOIN penerbit ON penerbit.kode_penerbit = buku.kode_penerbit "
                + "INNER JOIN klasifikasi ON klasifikasi.id_klasifikasi = buku.kode_ddc ORDER BY buku.kode_buku DESC";

        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            ResultSet results = statement.executeQuery();

            while (results.next()) {
                model.addRow(new Object[]{
                    no++,
                    results.getString("judul_buku"),
                    results.getString("nama_pengarang"),
                    results.getString("nama_klasifikasi"),
                    results.getString("penerbit"),
                    sdf.format(results.getDate("tahun_terbit")),
                    results.getInt("kode_buku")
                });
            }

            Tabel1.setModel(model);
            ViewUtil.hideTableColumn(Tabel1, 6);
            customStyleTable();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void customStyleTable() {
        Tabel.getColumnModel().getColumn(0).setMaxWidth(40);
        Tabel1.getColumnModel().getColumn(0).setMaxWidth(40);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabel;
    private javax.swing.JTable Tabel1;
    private javax.swing.JScrollPane TabelBukuBaru;
    private javax.swing.JScrollPane TabelBukuFavorit;
    private javax.swing.JLabel background;
    // End of variables declaration//GEN-END:variables
}
